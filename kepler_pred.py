# -*- coding: utf-8 -*-
"""kepler_pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUQB0hl_oLgyKS9bWEejFCKvOLuRqEED
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount("/content/gdrive")

df=pd.read_excel("KEPLER_data_Filterde.xlsx")

df.head()

df.isna().sum()/len(df)*100

df["koi_score"].isnull().sum()/len(df["koi_score"])*100

md=df["koi_score"].median()
df["koi_score"]=df["koi_score"].fillna(md)
df["koi_score"].isnull().sum()/len(df["koi_score"])*100

df=df.dropna(axis=0)

df.isna().sum()/len(df)*100

df.info()

#

df.iloc[:,2:]=df.iloc[:,2:].astype(float)



df.info()
df.describe()

df.corr()
df["koi_disposition"].unique()

df["koi_disposition"].value_counts()/len(df["koi_disposition"])*100

df.info()

df["koi_disposition"].value_counts()/len(df["koi_disposition"])*100      # cheking data how target is balanced

from sklearn import preprocessing
LE=preprocessing.LabelEncoder()
df["koi_disposition"]=LE.fit_transform(df["koi_disposition"])
df["koi_disposition"]
LE.classes_

df.head()

y=df.iloc[:,1:2]
x=df.iloc[:,2:]



from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.25,random_state=1)
sd=xtrain[:1:]
sd

for i in sd:
  print(i)

from sklearn.tree import DecisionTreeClassifier

from sklearn.model_selection import GridSearchCV

tree_para = {'criterion':['gini','entropy'],'max_depth':[i for i in range(1,40)]}
clf = GridSearchCV(DecisionTreeClassifier(), tree_para, cv=3)
clf.fit(xtrain,ytrain)

from sklearn.tree import DecisionTreeClassifier  
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

DT= DecisionTreeClassifier(criterion='entropy',max_depth=6, random_state=0)  
DT.fit(xtrain, ytrain)
DT.predict(xtest)

ypred= DT.predict(xtest)  
print(classification_report(ytest,ypred),"\n",accuracy_score(ytest,ypred))









import pickle

pickle.dump(DT,open('model_DT.pkl','wb'))











